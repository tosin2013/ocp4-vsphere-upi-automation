- hosts: all

  environment:
    PATH: "{{ working_dir }}/{{ config.clusterName }}.{{ config.baseDomain }}/bin:{{ ansible_env.PATH }}"

  tasks:
  - name: Install the necessary linux packages which will be needed later in the ansible run
    yum:
      name:
        - patch
        - gzip
        - python3
        - python3-pip
    become: true

  - name: "Install pyvmomi using pip3"
    shell: pip3 install --upgrade pyvmomi

  - name: "Install requests using pip3"
    shell: pip3 install --upgrade requests

  - name: get user home directory
    shell: >
            getent passwd {{ ansible_user_id }}  | awk -F: '{ print $6 }'
    changed_when: false
    register: user_home

  - name: Remove install-dir, downloads and patches directories and related directories
    file:
      path: "{{ item }}"
      state: absent
    with_items:
      - "{{ user_home.stdout }}/{{ config.clusterName }}.{{ config.baseDomain }}"
      - "{{ user_home.stdout }}/downloads"
      - "{{ user_home.stdout }}/install-dir"
      - "{{ user_home.stdout }}/patches"
      - "{{ user_home.stdout }}/.ssh"
      - "{{ user_home.stdout }}/bin"
      - "{{ user_home.stdout }}/ocp4-utils"
    when: clean is defined

  - name: Synchronization of src on the control machine to dest on the remote hosts
    synchronize:
      src: "{{ working_dir }}/{{ config.clusterName }}.{{ config.baseDomain }}/{{ config.clusterName }}.{{ config.baseDomain }}.tgz"
      dest: "/tmp/{{ config.clusterName }}.{{ config.baseDomain }}.tgz"

  - name: Extract tar file  into /root/
    command: tar -zxvf /tmp/{{ config.clusterName }}.{{ config.baseDomain }}.tgz -C  "{{ user_home.stdout }}"

  - name: Move Extracted Files to root directory
    shell: |
      cd {{ user_home.stdout }}/{{ config.clusterName }}.{{ config.baseDomain }} && mv * {{ user_home.stdout }}

  - name: Copy all binary files to bin
    shell: |
      #!/bin/bash
      cd {{ user_home.stdout }}/bin
      rm README.md
      cp * /usr/local/bin/

  - name: Check if template is already created
    shell: "/usr/local/bin/govc  vm.info -k $(echo {{templateName}}.ova | sed -e 's/.ova//')"
    register: template_created

  - name: Import the OVA file into the folder in vCenter
    command: "/usr/local/bin/govc import.ova -options={{ user_home.stdout }}/vra.json -folder={{ folder }} -name={{ templateName }} -ds={{ vmware_datastore }} {{ user_home.stdout }}/downloads/{{templateName}}.ova  "
    when: template_created.stdout == ""

  - name: Remove the Network Adapter
    command: "/usr/local/bin/govc device.remove -vm {{ folder }}/{{ templateName }} ethernet-0"
    when: template_created.stdout == ""

  - name: Update VM options on the template
    command: "/usr/local/bin/govc vm.change -vm {{ folder }}/{{ templateName }} -latency high -e=disk.EnableUUID=TRUE -e=guestinfo.ignition.config.data.encoding=base64 -e=guestinfo.ignition.config.data=blah"
    when: template_created.stdout == ""

  - name: Remove tar file
    file:
      path: "/tmp/{{ config.clusterName }}.{{ config.baseDomain }}.tgz"
      state: absent
