- hosts: all

  environment:
    PATH: "{{ working_dir }}/{{ config.clusterName }}.{{ config.baseDomain }}/bin:{{ ansible_env.PATH }}"

  tasks:
  - name: Install the necessary linux packages which will be needed later in the ansible run
    yum:
      name:
        - patch
        - gzip
        - python3
        - python3-pip
    become: true

  - name: "Install pyvmomi using pip3"
    shell: pip3 install --upgrade pyvmomi

  - name: "Install requests using pip3"
    shell: pip3 install --upgrade requests

  - name: get user home directory
    shell: >
            getent passwd {{ ansible_user_id }}  | awk -F: '{ print $6 }'
    changed_when: false
    register: user_home

  - name: Remove install-dir, downloads and patches directories and related directories
    file:
      path: "{{ item }}"
      state: absent
    with_items:
      - "{{ user_home.stdout }}/{{ config.clusterName }}.{{ config.baseDomain }}"
      - "{{ user_home.stdout }}/downloads"
      - "{{ user_home.stdout }}install-dir"
      - "{{ user_home.stdout }}/patches"
      - "{{ user_home.stdout }}/.ssh"
      - "{{ user_home.stdout }}/bin"
    when: clean is defined

  - name: check for openshift tgz file
    stat:
      path: "{{ working_dir }}/{{ config.clusterName }}.{{ config.baseDomain }}/{{ config.clusterName }}.{{ config.baseDomain }}.tgz"
      checksum_algorithm: sha1
    delegate_to: localhost
    register: openshift_tgz

  - name: Copy openshift tgz file
    copy:
      src: "{{ working_dir }}/{{ config.clusterName }}.{{ config.baseDomain }}/{{ config.clusterName }}.{{ config.baseDomain }}.tgz"
      dest: "/tmp/{{ config.clusterName }}.{{ config.baseDomain }}.tgz"
      checksum: "{{ openshift_tgz.stat.checksum }}"
    when: openshift_tgz.stat.exists == true

  - name: "Get remote tgz file sha information"
    stat:
      path: "/tmp/{{ config.clusterName }}.{{ config.baseDomain }}.tgz"
      checksum_algorithm: sha1
    register: remote_tgz



  - name: Extract tar file  into /root/
    command: tar -zxvf /tmp/{{ config.clusterName }}.{{ config.baseDomain }}.tgz -C  "{{ user_home.stdout }}"
    when:  remote_tgz.stat.checksum ==  openshift_tgz.stat.checksum

  - name: Move Extracted Files to root directory
    shell: |
      cd {{ user_home.stdout }}/{{ config.clusterName }}.{{ config.baseDomain }} && mv * {{ user_home.stdout }}
    when:  remote_tgz.stat.checksum ==  openshift_tgz.stat.checksum

  - name: Copy all binary files to bin
    shell: |
      #!/bin/bash
      cd {{ user_home.stdout }}/bin
      cp !(*.md) /usr/local/bin/
    when:  remote_tgz.stat.checksum ==  openshift_tgz.stat.checksum

  - name: Remove tar file
    file:
      path: "/tmp/{{ config.clusterName }}.{{ config.baseDomain }}.tgz"
      state: absent
