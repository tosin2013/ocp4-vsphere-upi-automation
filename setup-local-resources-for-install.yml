- hosts: "{{ hostname }}"

  environment: 
    PATH: "{{ playbook_dir }}/bin:{{ ansible_env.PATH }}"

  tasks:

  - name: Install the necessary linux packages which will be needed later in the ansible run
    yum:
      name:
        - patch
        - gzip
        - python3
        - python3-pip
    become: true

  - name: "Install pyvmomi using pip3"
    shell: pip3 install --upgrade pyvmomi

  - name: get user home directory
    shell: >
            getent passwd {{ ansible_user_id }}  | awk -F: '{ print $6 }'
    changed_when: false
    register: user_home

  - name: Generate a SSH key-pair
    openssh_keypair:
      path: "{{ user_home.stdout }}/.ssh/ocp4"
      force: false

  - name: get user home directory
    shell: >
            cat {{ user_home.stdout }}/.ssh/ocp4.pub
    changed_when: false
    register: sshkeyData

  - name: set sshKey
    set_fact:
     sshKey: "{{ sshkeyData.stdout }}"

  - name: Clean up existing bin, install-dir and downloads folders
    file: 
      path: "{{ user_home.stdout }}/{{ item }}"
      state: absent
    with_items: ["downloads", "install-dir", "patches", "ocp4-utils"] 
    when: clean is defined

  - name: Create install-dir, downloads and patches directories
    file:
      path: "{{ user_home.stdout }}/{{ item }}"
      state: directory
      mode: '0755'
    with_items: ["downloads", "install-dir", "patches"]  

  - name: Download govc
    get_url:
      url: "{{ download.govc}}"
      dest: "{{ user_home.stdout }}/downloads/govc.gz"
      validate_certs: no    

  - name: Unarchive govc
    shell: gzip -dc "{{ user_home.stdout }}/downloads/govc.gz" > "/usr/local/bin/govc"

  - name: Make govc executable
    file:
      path: "/usr/local/bin/govc"
      mode: '775'

  - name: Copy install-config.yaml file into install-dir
    template:
      src: "templates/install-config.yaml.j2"
      dest: "{{ user_home.stdout }}/install-dir/install-config.yaml"

  - name: Backup the install-config.yaml file 
    command: cp {{ user_home.stdout }}/install-dir/install-config.yaml {{ user_home.stdout }}/install-dir/install-config.yaml.orig

  - name: Generate the ignition manifests
    command: "/usr/local/bin/openshift-install create manifests --dir={{ user_home.stdout }}/install-dir"

  - name: Copy cluster scheduler path to machine 
    copy:
      src: patches/cluster-scheduler-02-config.yml.patch
      dest: "{{ user_home.stdout }}/patches/cluster-scheduler-02-config.yml.patch"

  - name: Apply the patch to set mastersSchedulable to false
    shell: |
      patch < {{ user_home.stdout }}/patches/cluster-scheduler-02-config.yml.patch {{ user_home.stdout }}/install-dir/manifests/cluster-scheduler-02-config.yml

  - name: Generate the ignition configs
    command: "/usr/local/bin/openshift-install create ignition-configs --dir={{ user_home.stdout }}/install-dir"

  - name: Copy append-bootstrap.ign file into install-dir
    template: 
      src: "templates/append-bootstrap.ign.j2"
      dest: "{{ user_home.stdout }}/install-dir/append-bootstrap.ign"

  - name: Get base64 version of append-bootstrap.ign
    shell: "base64 -w0 {{ user_home.stdout }}/install-dir/append-bootstrap.ign > {{ user_home.stdout }}/install-dir/append-bootstrap.64"

  - name: Get base64 version of master.ign
    shell: "base64 -w0 {{ user_home.stdout }}/install-dir/master.ign > {{ user_home.stdout }}/install-dir/master.64"

  - name: Get base64 version of worker.ign
    shell: "base64 -w0 {{ user_home.stdout }}/install-dir/worker.ign > {{ user_home.stdout }}/install-dir/worker.64"

  - name: Cloning  ocp4-utils repo
    git:
      repo: https://github.com/tosin2013/ocp4-utils.git
      dest: "{{ user_home.stdout }}/ocp4-utils"

  - name: Copy data.yaml file into ocp4-utils
    template:
      src: "templates/data.yaml.j2"
      dest: "{{ user_home.stdout }}/ocp4-utils/data.yaml"

  - name: Prepare ocp4-utils
    shell: |
      cd {{ user_home.stdout }}/ocp4-utils/
      pip3 install -r requirements.txt
      pip3 install pathlib
  
  - name: Configure static ips
    shell: cd {{ user_home.stdout }}/ocp4-utils/ && python3 {{ user_home.stdout }}/ocp4-utils/prepare.py